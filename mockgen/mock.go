// Code generated by MockGen. DO NOT EDIT.
// Source: sample_access_database.go
//
// Generated by this command:
//
//	mockgen -source=sample_access_database.go -destination=mockgen/mock.go -package=mockgen
//

// Package mockgen is a generated GoMock package.
package mockgen

import (
	context "context"
	reflect "reflect"

	"github.com/taako-502/go-testify-mock/database"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockSampleInteface is a mock of SampleInteface interface.
type MockSampleInteface struct {
	ctrl     *gomock.Controller
	recorder *MockSampleIntefaceMockRecorder
}

// MockSampleIntefaceMockRecorder is the mock recorder for MockSampleInteface.
type MockSampleIntefaceMockRecorder struct {
	mock *MockSampleInteface
}

// NewMockSampleInteface creates a new mock instance.
func NewMockSampleInteface(ctrl *gomock.Controller) *MockSampleInteface {
	mock := &MockSampleInteface{ctrl: ctrl}
	mock.recorder = &MockSampleIntefaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleInteface) EXPECT() *MockSampleIntefaceMockRecorder {
	return m.recorder
}

// FindUserByID mocks base method.
func (m *MockSampleInteface) FindUserByID(ctx context.Context, id primitive.ObjectID) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockSampleIntefaceMockRecorder) FindUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockSampleInteface)(nil).FindUserByID), ctx, id)
}
